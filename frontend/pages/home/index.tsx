import { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import { useQuery } from "react-query";
import { userContext } from "../../src/contexts/UserContext";
import { WebSocketContext } from "../../src/contexts/WebsocketContext";
import { apiClient } from "../../src/lib/apiclient/client";

interface IProps {}

const home: React.FC<IProps> = () => {
  const { data: user, isLoading: userLoading } = useContext(userContext);
  const { conn } = useContext(WebSocketContext);
  const router = useRouter();
  const [showCreate, setCreate] = useState<boolean>(false);
  const [roomname, setRoomName] = useState<string>("");
  const [roomdesc, setRoomDesc] = useState<string>("");
  const [autospeaker, setAutoSpeaker] = useState<boolean>(false);
  const { data: liveRooms, isLoading: liveRoomsLoading } = useQuery(
    ["live-rooms"],
    async () => {
      const { data } = await apiClient.get("/room/rooms/live");
      return data;
    }
  );
  const handleRoomCreate = async () => {
    try {
      const { data } = await apiClient.post("/room/create", {
        roomname,
        roomdesc,
        autospeaker,
      });
      if (data.roomid && conn) {
        console.log("sending room data to voice server", data.roomid);
        conn.emit("create-room", { roomId: data.roomid });
      } else {
        alert("something went wront during creation try again");
      }
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {showCreate && (
        <div>
          <div
            onClick={() => setCreate(false)}
            className="w-screen h-screen bg-black opacity-30 absolute z-40"
          ></div>

          <div className="w-[500px] h-auto top-1/4 left-1/3 absolute bg-neutral-800 z-50 text-white px-5 py-4">
            <span className="font-semibold text-lg">Create a room</span>
            <input
              value={roomname}
              onChange={e => setRoomName(e.target.value)}
              className="w-full mb-4 p-3 mt-4 text-white bg-slate-700"
              placeholder="Enter room name"
            />
            <input
              value={roomdesc}
              onChange={e => setRoomDesc(e.target.value)}
              className="w-full mb-4 p-3 text-white bg-slate-700"
              placeholder="Enter room description"
            />
            <span className="flex items-center mb-4">
              <input
                checked={autospeaker}
                type={"checkbox"}
                onChange={e => setAutoSpeaker(e.target.checked)}
              />
              <span>autospeaker</span>
            </span>
            <button
              onClick={handleRoomCreate}
              className="w-full mb-3 bg-blue-600 px-2 py-3"
            >
              Create
            </button>
          </div>
        </div>
      )}
      <div className="w-screen h-screen relative bg-gray-900 text-white flex min-h-screen  py-2 overflow-x-hiddenflex flex-col justify-center items-center">
        <div className="mb-6 text-center">
          <h1 className="font-bold text-5xl mb-3">Welcome to Dropüîä</h1>
          <p className="font-bold text-2xl">
            Voice Converstations Scaling to the Moon üöÄ
          </p>
        </div>
        <div className="flex flex-col w-1/3 h-[800px] px-5 overflow-y-auto  mb-6 text-left text-lg">
          <span className="font-semibold text-xl text-left mb-4">
            Live Rooms üî¥
          </span>
          {liveRooms ? (
            liveRooms.map((lr: any) => {
              return (
                <div
                  key={lr.roomid}
                  onClick={() => router.push(`/room/${lr.roomid}`)}
                  className="w-full mb-4 cursor-pointer h-auto bg-gray-700 px-4 py-3 rounded-md"
                >
                  <div className="w-full flex justify-between">
                    <span className="font-semibold">{lr.roomname}</span>
                    <div>
                      <span>üßç {lr.participants.length}</span>
                    </div>
                  </div>
                  <div className="flex flex-col items-start">
                    {lr.participants.map((u: any) => (
                      <span key={u} className="text-xs">
                        {u}
                      </span>
                    ))}
                  </div>
                </div>
              );
            })
          ) : (
            <span>No live rooms available</span>
          )}
        </div>
        <div className="w-1/4">
          <button
            onClick={() => setCreate(true)}
            className="bg-sky-600 p-3 text-white font-bold rounded-md w-full"
          >
            Create Room
          </button>
        </div>
      </div>
    </>
  );
};

export default home;
