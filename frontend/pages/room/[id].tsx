import axios from "axios";
import Head from "next/head";
import { useRouter } from "next/router";
import { useContext, useEffect } from "react";
import { useQuery } from "react-query";
import { userContext } from "../../src/contexts/UserContext";
import { WebSocketContext } from "../../src/contexts/WebsocketContext";
import useSplitUsersIntoSections from "../../src/lib/room/useSplitUsersIntoSections";

const room = () => {
  const router = useRouter();
  const { id: roomId } = router.query;
  const { data: user, isLoading: userLoading } = useContext(userContext);
  const { conn } = useContext(WebSocketContext);
  const { isLoading, data: room } = useQuery(
    ["room", roomId],
    async () => {
      const data = await axios.get(
        "https://192.168.7.131:8000/room/" + roomId + "?userid=" + user.userid
      );
      return data.data;
    },
    { enabled: !!user, refetchOnWindowFocus: false }
  );

  const { isLoading: permissionsLoading, data: roomPermissions } = useQuery(
    ["permissions", roomId],
    async () => {
      const data = await axios.get(
        "https://192.168.7.131:8000/room/" +
          roomId +
          "/permissions/?userid=" +
          user.userid
      );
      return data.data;
    },
    { enabled: !!room, refetchOnWindowFocus: false }
  );

  const { askedToSpeak, listeners, speakers } = useSplitUsersIntoSections(room);
  useEffect(() => {
    if (!conn || userLoading || permissionsLoading) {
      return;
    }
    conn.emit("join-as-speaker", {
      roomId,
      peerId: user.userid,
      peer: { ...user, ...roomPermissions },
    });
  }, [conn, userLoading, roomId, permissionsLoading]);

  if (isLoading || userLoading || !conn || !roomId) {
    return <p>Loading....</p>;
  }
  return (
    <>
      <Head>
        <title>{room.roomname}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta
          http-equiv="Content-Security-Policy"
          content="upgrade-insecure-requests"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-slate-900 w-screen h-screen flex flex-row justify-center items-center py-4">
        <div className="w-1/3 h-full">
          <div className="w-full h-16 flex flex-row font-bold text-white items-center justify-between text-lg bg-slate-800 p-3">
            <span>Drop ðŸ”Š</span>
            <span>{room.roomname}</span>
            <span>
              <img
                className="w-9 h-9 rounded-full"
                src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpsCPmHTU68H-FYeFA_dI8iDnFsPaomL1Kr3_AutNq7w&s"
              />
            </span>
          </div>
          <div className="text-white h-4/5 py-4 flex flex-col items-start w-full">
            <div className="mb-9 w-full">
              <p className="mb-4">Speakers ({speakers.length})</p>
              <div className="grid grid-cols-4 gap-2">{speakers}</div>
            </div>

            {askedToSpeak.length > 0 && (
              <div className="mb-6">
                <p className="mb-4">Asked to speak ({askedToSpeak.length})</p>
                <div className="grid grid-cols-4 gap-x-2">{askedToSpeak}</div>
              </div>
            )}

            <div className="mb-6">
              <p className="mb-4">Listeners ({listeners.length})</p>
              <div className="grid grid-cols-4 gap-2">{listeners}</div>
            </div>
          </div>
          <div className="w-full h-16 flex flex-row items-center justify-between text-lg bg-slate-800 text-white font-semibold p-3">
            <span className="flex flex-col items-center cursor-pointer">
              {/* <ExitOutline
                color={"#fff"}
                title={"Leave"}
                height="20px"
                width="20px"
              /> */}
              <span className="text-sm">Leave</span>
            </span>

            <span className="flex flex-col items-center cursor-pointer">
              {/* <ChatboxOutline color={"#00000"} height="20px" width="20px" /> */}
              <span className="text-sm">Chat</span>
            </span>
            <span className="flex flex-col items-center cursor-pointer">
              {/* <PersonAddOutline color={"#00000"} height="20px" width="20px" /> */}
              <span className="text-sm">Invite</span>
            </span>
          </div>
        </div>
        <div className="w-1/5 h-full ">
          <div className="w-full h-16 font-bold text-white flex flex-row items-center justify-center text-lg bg-neutral-700 p-3">
            <span>Chat</span>
          </div>
          <div className="w-full h-4/5 bg-stone-800"></div>
          <div className="w-full h-16 p flex flex-row items-center justify-between text-lg bg-neutral-700 p-3">
            <input
              className="w-full p-2 text-sm bg-zinc-800"
              placeholder="Enter a message"
            />
          </div>
        </div>
      </main>
    </>
  );
};

export default room;
